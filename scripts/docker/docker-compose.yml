version: '3'
services:
  # kafka
  Kafka00Service:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    container_name: Kafka00Container
    ports:
      - '9092:9092' # 내부 네트워크 통신을 위한 PLAINTEXT 리스너
      - '10000:10000' # 외부 접근을 위한 EXTERNAL 리스너
    environment:
      # KRaft 설정
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw # 고유 클러스터 ID, 모든 브로커에 동일하게 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093,1@Kafka01Service:9093,2@Kafka02Service:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 리스너 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka00Service:9092,EXTERNAL://localhost:10000
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 클러스터 설정
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
  Kafka01Service:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    container_name: Kafka01Container
    ports:
      - '9093:9092' # 내부 네트워크 통신을 위한 PLAINTEXT 리스너
      - '10001:10000' # 외부 접근을 위한 EXTERNAL 리스너
    environment:
      # KRaft 설정
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw # 고유 클러스터 ID, 모든 브로커에 동일하게 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093,1@Kafka01Service:9093,2@Kafka02Service:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 리스너 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka01Service:9092,EXTERNAL://localhost:10001
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 클러스터 설정
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
  Kafka02Service:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    container_name: Kafka02Container
    ports:
      - '9094:9092' # 내부 네트워크 통신을 위한 PLAINTEXT 리스너
      - '10002:10000' # 외부 접근을 위한 EXTERNAL 리스너
    environment:
      # KRaft 설정
      - KAFKA_ENABLE_KRAFT=yes # KRaft 모드 활성화
      - KAFKA_CFG_BROKER_ID=2
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw # 고유 클러스터 ID, 모든 브로커에 동일하게 설정
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@Kafka00Service:9093,1@Kafka01Service:9093,2@Kafka02Service:9093
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      # 리스너 설정
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:10000
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://Kafka02Service:9092,EXTERNAL://localhost:10002
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 클러스터 설정
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=2
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
  KafkaWebUiService:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    container_name: KafkaWebUiContainer
    ports:
      - '8085:8080' # 호스트의 8085 포트를 컨테이너의 8080 포트에 바인딩
    environment:
      - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=Kafka00Service:9092,Kafka01Service:9092,Kafka02Service:9092
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true
      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
  # MSA Service Discovery
  discovery-service:
    image: hanyoonsoo/discovery-service:1.0
    container_name: discovery-service
    ports:
      - "8761:8761"
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
  # MSA API Gateway
  gateway-service:
    image: hanyoonsoo/gateway-service:1.0
    container_name: gateway-service
    ports:
      - "8000:8000"
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - discovery-service
    volumes:
      - ./logs/gateway-service:/logs
  # USER-SERVICE
  redis-user:
    image: redis:latest
    container_name: redis-user
    ports:
      - "6380:6379"
  mysql-user:
    image: mysql:latest
    container_name: mysql-user
    environment:
      MYSQL_ROOT_PASSWORD: rootroot
      MYSQL_DATABASE: capstone
      MYSQL_USER: ryudain
      MYSQL_PASSWORD: ${PASSWORD}
    ports:
      - "3306:3306"
  user-service:
    image: hanyoonsoo/user-service:1.0
    container_name: user-service
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - redis-user
      - mysql-user
      - discovery-service
      - gateway-service
    volumes:
      - ./logs/user-service:/logs
  user-service-temp:
    image: hanyoonsoo/user-service:1.0
    container_name: user-service-temp
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - redis-user
      - mysql-user
      - discovery-service
      - gateway-service
  # COMMUNITY-SERVICE
  redis-community:
    image: redis:latest
    container_name: redis-community
    ports:
      - "6381:6379"
  mariadb-community:
    image: mariadb:latest
    container_name: mariadb-community
    environment:
      MYSQL_ROOT_PASSWORD: rootroot
      MYSQL_DATABASE: capstone
      MYSQL_USER: fittrip
      MYSQL_PASSWORD: fittrip0923@@
    ports:
      - "3307:3306"
  community-service:
    image: hanyoonsoo/community-service:1.0
    container_name: community-service
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - redis-community
      - mariadb-community
      - discovery-service
      - gateway-service
    volumes:
      - ./logs/community-service:/logs
  community-service-temp:
    image: hanyoonsoo/community-service:1.0
    container_name: community-service-temp
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - redis-community
      - mariadb-community
      - discovery-service
      - gateway-service
      - community-service
  # CHAT-SERVICE
  mongodb1:
    image: mongo:latest
    container_name: mongodb1
    hostname: mongo1
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: capstone
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    command: mongod --replSet rs0 --keyFile /etc/mongodb.key --bind_ip_all
    volumes:
      - ./db1:/data/db
      - ~/.ssh/mongodb.key:/etc/mongodb.key
  mongodb2:
    image: mongo:latest
    container_name: mongodb2
    hostname: mongo2
    restart: always
    ports:
      - "27018:27018"
    environment:
      MONGO_INITDB_DATABASE: capstone
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    command: mongod --replSet rs0 --keyFile /etc/mongodb.key --bind_ip_all
    volumes:
      - ./db2:/data/db
      - ~/.ssh/mongodb.key:/etc/mongodb.key
  chat-service:
    image: hanyoonsoo/chat-service:1.0
    container_name: chat-service
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - mongodb1
      - mongodb2
      - discovery-service
      - gateway-service
    volumes:
      - ./logs/chat-service:/logs
  chat-service-temp:
    image: hanyoonsoo/chat-service:1.0
    container_name: chat-service-temp
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - mongodb1
      - mongodb2
      - discovery-service
      - gateway-service
      - chat-service
  # SIG-SERVICE
  sig-service:
    image: hanyoonsoo/sig-service:1.0
    container_name: sig-service
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - discovery-service
      - gateway-service
    volumes:
      - ./logs/sig-service:/logs
  sig-service-temp:
    image: hanyoonsoo/sig-service:1.0
    container_name: sig-service-temp
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - discovery-service
      - gateway-service
  # STATE-SERVICE
  redis-state:
    image: redis:latest
    container_name: redis-state
    ports:
      - "6382:6379"
  state-service:
    image: hanyoonsoo/state-service:1.0
    container_name: state-service
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - discovery-service
      - gateway-service
      - redis-state
    volumes:
      - ./logs/state-service:/logs
  state-service-temp:
    image: hanyoonsoo/state-service:1.0
    container_name: state-service-temp
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - discovery-service
      - gateway-service
      - redis-state
      - state-service
  # NOTIFICATION-SERVICE
  mysql-notification:
    image: mysql:latest
    container_name: mysql-notification
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: capstone
    ports:
      - "3308:3306"
  notification-service:
    image: hanyoonsoo/notification-service:1.0
    container_name: notification-service
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - discovery-service
      - gateway-service
      - mysql-notification
    volumes:
      - ./logs/notification-service:/logs
  notification-service-temp:
    image: hanyoonsoo/notification-service:1.0
    container_name: notification-service-temp
    environment:
      jasypt.encryptor.password: ${JASYPT_PASSWORD}
    depends_on:
      - Kafka00Service
      - Kafka01Service
      - Kafka02Service
      - discovery-service
      - gateway-service
      - mysql-notification
